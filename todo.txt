## TODO

* parse: SLoop(block) may be an arry of Expr or single MissingBlock() !
* parse: test VecPattern

* diagnostics: Trace Value (GUI)
     Display UI for values in context of the expression that generates them
   - Design
      Breakdown = rendering of an AST node and its sub-expression values.
      ValueBox = rendering of a value; default = Brief
      ResultBox = component that toggles between ValueBox & Breakdown
      ErrorDialog = view that shows assertion failure *at* `assert` in text
      - Breakdowns for all AST expression nodes
      - ValueBox for all V...
      - ErrorDialog & its interaction with text view
      - "jump" feature, ResultDialog anchored to expression?
      - stack view
      - ValueBox: toggling between
      - Other navigation? Step?
  - Impl simple ErrorDialog
  - Add ValueBox and Breakdown to ErrorDialog
  - ResultBox: Allow toggling of sub-expressions
  - ResultDialog: jump to anchored result
* diagnostics: Breakpoint/Step Execution?

* Language features...
  - check arity
  - rest/spread varargs
  - eval VFUN: fall back to "call" method for non-functions
  - enums
  - match function-like patterns  F(a) => THEN --> F.match(V, (a) -> THEN, E)
  - Class.extend()
  - recursive definitions (forward declarations)
  - type constructors
  - `where`
  - dictionaries/hashmaps
  - destructuring assignment with "else:" clause
  - short-circuiting `or` & `and`
  - String syntax: `\xXX` and `\u{X...}`
  - `'` suffixes in variable names (shadowing avoidance)
  - named arguments & defaults
  - `true`, `false` as keywords (not manifest vars)
  - disallow re-binding `true`, `false`, `break`, `repeat`
     a) trap at parse time?
     b) use an IErr "wrapper" of the Fn expression?
  - treat `match` as a statement (no match => rest of block)
  - `match VALUE in ENUM: Foo => A` --> `match VALUE: ENUM.Foo => A`
  - allow match cases to `break`, `repeat`, and re-bind loop vars

* Documented-but-unimplemented Features (from concepts.md)
  - vector patterns (in match)
  - dictionary patterns (in match)
  - for loops
  - action syntax
  - vector & record equality
  - Orchestrators
  - typed structures
  - profiling
  - defining objects
  - introspection
  - compilation & early evaluation

* Visualize execution
  - collect execution trace
  - capture start & end of elements


## Rio Project Overview

* parse: converts source text to AST.

  AST is a tree data structure that corresponds closely to the surface
  language syntax description.  AST nodes are annotated with positions in
  the text.

* desugar: converts AST to IL

  IL is a data type that embodies an expression-based language, similar to
  AST butmuch simpler than AST.  It is comprised of a small number of
  expressions that represent:

   - Functions: construction, application, arguments
   - Primitives: primitive values and primitive functions
   - Tags: associations between AST nodes and IL subtrees
   - Errors: errors encountered during parsing or desugaring

* eval: walks the IL tree, computing a final result and a "trace".

  The trace is a log of intermediate results produced by AST expressions.
  It enables inspection of the history of execution.

* run: load and execute Rio source code from the terminal.


################################################################

---- Long-term

 * "P1" (Phase 1) language definition
 * P1 "bootstrap" interpreter (JavaScript)
    - parse & walk AST
    - minimal set of OS bindings
 * P2 interpreter/compiler (written in Rio P1, supports P2 superset)
    - compiles to Wasm
    - obsoletes bootstrap
    - may leak memory: okay for self-hosting, target programs
      are faster than when interpreted by P1.
 * P3 interpreter/compiler (built using P2)
    - more than self-hosting: non-leaking, clean semantics
 * Choose native VM: Wasmtime, Wasmer, ?
 * OS (WASI?) bindings
 * Web Server
 * P3+: Richer data structuring, parallel, ...
 * IDE
   - display values (or `pending...`) [computed in parallel VM]
